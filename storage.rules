rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Homework files - allow teachers and admins to create, students to read
    match /homework/{allPaths=**} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
      allow update: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
      allow delete: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
    }
    
    // Homework submission files - allow students to create their own, teachers/admins to read all
    match /homework-submissions/{allPaths=**} {
      allow read: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin' || getUserRole() == 'student');
      allow create: if request.auth != null && getUserRole() == 'student';
      allow update: if request.auth != null && getUserRole() == 'student';
      allow delete: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
    }
    
    // Materials - allow teachers and admins to manage, students to read
    match /materials/{allPaths=**} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
      allow update: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
      allow delete: if request.auth != null && 
        (getUserRole() == 'teacher' || getUserRole() == 'admin');
    }
    
    // Profile images - allow users to manage their own
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Default fallback - allow authenticated users basic access
    match /{allPaths=**} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
  }
  
  // Helper function to get user role from Firestore
  function getUserRole() {
    return get(/databases/(default)/documents/users/$(request.auth.uid)).data.role;
  }
}